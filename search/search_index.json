{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#unlock-the-power-of-pangenome-graphs","title":"Unlock the Power of Pangenome Graphs","text":"<p>.</p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<p>Participants in this course will gain an understanding of pangenome concepts and acquire hands-on experience in constructing and analyzing pangenome graphs. By the end of the course, they will have developed a comprehensive understanding of pangenome methods centered around whole genome assemblies. This will empower them to apply these methods to complex research questions that necessitate an understanding of the relationships between multiple genomes, or that require accounting for variability when analyzing new genomes.</p> <p>Content</p> Lesson Overview Time 1. Intro Introduction to pangenome graphs 30 min Break 10 min 2. Setup Setup instructions for the tools and data used in this course 30 min 3. PGGB Introduction to the PGGB toolkit and its logic 30 min Break 10 min 4. Running Running the command to construct a graph and discuss key parameters 45 min Lunch 45 min 5. Evaluate Evaluating the constructed graph through MultiQC reports 60 min Break 10 min 6. Variants Extracting variants from a graph 45 min <p>Attribution notice</p> <ul> <li>The workshop material was collaboratively prepared by Zoe Yang, Nuzla Ismail, Dinindu Senanayake, Jian Sheng Boey, Patrick J. Biggs, Mik Black, and Joep de Ligt</li> <li>The development of this workshop is supported by Genomics Aotearoa Genome Graphs project to Mik Black and Joep de Ligt</li> </ul> <p>Acknowledgments</p> <ul> <li>We extend our sincere appreciation to Assistant Professor Erik Garrison and his team at the University of Tennessee Health Science Center for their valuable guidance, suggestions, and feedback during the development of the pangenome graph pipeline.</li> </ul> <p>Further reading and Extracurricular materials</p> <p>After this course you might want to learn more about pangenome graphs and start using them in your own research, below are some great resources to help with that.</p> <p>Documentation: - PGGB comes with rich documentation that explains key concepts and parameters: https://pggb.readthedocs.io/en/latest/index.html</p> <p>Examples and lectures: - MemPan23 hosted a 3 day course and semniar series, check out there resources and lectures: https://pangenome.github.io/MemPanG23/</p>"},{"location":"1_Introduction_to_pangenome_graphs/","title":"1. Introduction to pangenome graphs","text":""},{"location":"1_Introduction_to_pangenome_graphs/#what-is-a-pangenome","title":"What is a pangenome?","text":"<p> A pangenome is defined as the comprehensive collection of whole-genome sequences from multiple individuals within a clade, a population or a species.   This collective genomic dataset can be further divided into two distinct components: the core genome, which includes regions present in all individuals at the time of analysis, and the accessory genome, consisting of regions only found in a subset of individuals.  </p> <p> . </p>"},{"location":"1_Introduction_to_pangenome_graphs/#what-is-a-pangenome-graph","title":"What is a pangenome graph?","text":"<p> Pangenome graphs represent pangenomes using graph models, effectively capturing the complete genetic variation across the input genomes. These graphs consist of three components: nodes, edges, and paths. </p> <p></p>"},{"location":"1_Introduction_to_pangenome_graphs/#nodes","title":"Nodes","text":"<ul> <li>DNA segments, which can be any length </li> </ul>"},{"location":"1_Introduction_to_pangenome_graphs/#edges","title":"Edges","text":"<ul> <li>Describe the possible ways of walking through the nodes</li> <li>Connect pairs of node strands</li> <li>Can represent inversions </li> </ul>"},{"location":"1_Introduction_to_pangenome_graphs/#paths","title":"Paths","text":"<ul> <li>Paths are routes through the nodes of the graph</li> <li>Genomes</li> <li>Haplotypes</li> <li>Alleles/variants </li> </ul>"},{"location":"1_Introduction_to_pangenome_graphs/#overview-of-a-pangenome-graph-construction-pipeline","title":"Overview of a pangenome graph construction pipeline","text":""},{"location":"1_Introduction_to_pangenome_graphs/#pangenome-concstruction-by-pangenome-graph-builder-pggb","title":"Pangenome concstruction by Pangenome Graph Builder (PGGB)","text":"<p> The PGGB pipeline is a reference-free method. It builds pangenome graphs using an all-to-all whole genome alignment approach with wfmash. Seqwish is employed to induce the graph, followed by progressive normalization with smoothxg and gfaffix. </p> <p></p>"},{"location":"1_Introduction_to_pangenome_graphs/#graph-manipulation-using-odgi-and-multiqc-report","title":"graph manipulation using ODGI and multiQC report","text":"<ul> <li>The Optimized Dynamic Genome/graph Implementation (ODGI) is used for various graph manipulation tasks, including visualization.</li> <li>MultiQC is used to generate a report, which includes statistics of the seqwish-induced graph, the final graph, and various visualizations of the final graph.</li> </ul>"},{"location":"1_Introduction_to_pangenome_graphs/#obtain-distance-for-phylogenetic-analysis","title":"Obtain distance for phylogenetic analysis","text":"<p> We use ODGi to extract distances between paths within the graph, enabling further phylogenetic analysis. </p> <p></p>"},{"location":"1_Introduction_to_pangenome_graphs/#varaint-calling","title":"Varaint calling","text":"<p> By using the pangenome graph created with PGGB, it is possible to concurrently identify a variety of genetic variations. These include structural variations (SVs), rearrangements, and smaller variants such as single nucleotide polymorphisms (SNPs) and insertions/deletions. These can be identified through the process of vg deconstruction. </p> <p></p>"},{"location":"1_Introduction_to_pangenome_graphs/#ngs-data-analysis-against-graph","title":"NGS data analysis against graph","text":"<p> The VG toolkit is utilized for NGS data analysis against the graph, including tasks such as read mapping and variant calling </p> <p></p>"},{"location":"1_Introduction_to_pangenome_graphs/#key-components-of-this-pipeline","title":"Key components of this pipeline","text":"<ul> <li>Graph construction using the PGGB</li> <li>Graph manipulation using ODGI</li> <li>Variant calling for NGS data using the VG toolkit </li> </ul> <p> It provides an efficient and integrated approach for pangenome analysis.  </p>"},{"location":"2_Tools_and_setup/","title":"2. Tools &amp; setup","text":"<p>Tools used for the pangenome graph pipeline</p> <ul> <li>The PanGenome Graph Builder (PGGB) is used for graph construction (https://github.com/pangenome/pggb).</li> <li>The Optimized Dynamic Genome/Graph Implementation (ODGI) is employed for graph manipulation (https://github.com/pangenome/odgi).</li> <li>The VG Toolkit is utilized for variant calling with NGS against a pangenome graph reference (https://github.com/vgteam/vg).</li> <li>Mash is used to estimate pairwise distances among genomes (https://github.com/marbl/Mash).</li> <li>ProgressiveMauve is utilized to verify the alignment of genomes (https://darlinglab.org/mauve/user-guide/progressivemauve.html)</li> <li>Circlator is employed to fix the starting point of genomes (https://sanger-pathogens.github.io/circlator/).</li> <li>SAMtools is used to build an index of input FASTA files (https://github.com/samtools/samtools).</li> <li>BCFtools is used to check the statistics of VCF files (https://github.com/samtools/bcftools).</li> </ul> Other Tools might be useful for pangenome graphs <ul> <li>The Minigraph-Cactus Pangenome Pipeline (https://github.com/ComparativeGenomicsToolkit/cactus/blob/master/doc/pangenome.md).</li> <li>gfaestus, which can be used for graph visualization (https://github.com/chfi/gfaestus)</li> <li>SequenceTubeMap for tube map visualization of genomic sequence graphs (https://github.com/vgteam/sequenceTubeMap)</li> <li>......</li> </ul> <p>Software stack for pggb pipeline</p> <p>All of the required software is pre-installed and configured as modules. We will load them as needed  </p> <ul> <li>pggb/0.5.3-Miniconda3</li> <li>SAMtools</li> <li>Mash/2.3-GCC-11.3.0</li> <li>Circlator/1.5.5-gimkl-2022a-Python-3.10.5</li> <li>vg/1.46.0</li> </ul> Running the pggb workflow locally <p>The following code DOES NOT need to be run if you working on NeSI, but is  provided here to show how to work through the workshop material on a non-NeSI  system (e.g., if you are running the code on your own computer).</p> <ul> <li>Bacteria called N. meningitidis cause meningococcal disease(IMD). About 1 in 10 people have these bacteria in the back of their nose and throat without being ill. This is called being \u2018a carrier.\u2019 Sometimes the bacteria invade the body and cause IMD.</li> <li>Different capsular polysaccharides divide the meningococci into at least 12 serogroups, of which six groups (A, B, C, W, X, and Y) are responsible for most disease.</li> <li>The genome of this bacterium spans approximately 2.1 to 2.4 Mb and possesses a GC content ranging from 51-52%.</li> <li>A notable trait of N. meningitidis genomes is their high recombination rate, which contributes significantly to the substantial genetic diversity found in this species.</li> <li>Throughout this workshop, we use five genome assemblies of N. meningitidis to evaluate the pangenome pipeline, from the construction of the pangenome graph to the calling of variants.</li> </ul> genomes ASM IDs GCF IDs SEROGROUP Sequence type Clonal Complex NC_017518.1 Neisseria meningitidis NZ-05/33 ASM19152v1 GCF_000191525.1 B 42 ST-41/44 NC_003112.2 Neisseria meningitidis MC58 ASM880v1 GCF_000008805.1 - 74 ST-32 NZ_CP007668.1 Neisseria meningitidis M0579 ASM102983v1 GCF_001029835.1 B - ST-41/44 NZ_CP016880.1 Neisseria meningitidis strain M07165 ASM170367v1 GCF_001703675.1 W 11 ST-11 NZ_CP020423.2 Neisseria meningitidis strain FDAARGOS_212 ASM207367v2 GCF_002073675.2 C - ST16521 How the Neisseria meningitidis genomes were formatted for this workshop <p>The following code DOES NOT need to be run, but is provided here to show how the Neisseria meningitidis genomes were downloaded and prepared for analysis.</p> <pre><code># Create a new directory called nm_genomes and change to that directory\nmkdir nm_genomes\ncd nm_genomes\n</code></pre> <p>Download the genome assemblies from NCBI and uncompress.  In the Unix environment you can use the <code>curl</code> command.</p> <pre><code>#NC_017518.1\ncurl -OJX GET \"https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000191525.1/download?include_annotation_type=GENOME_FASTA,GENOME_GFF,RNA_FASTA,CDS_FASTA,PROT_FASTA,SEQUENCE_REPORT&amp;filename=GCF_000191525.1.zip\" -H \"Accept: application/zip\"\n# ACC NUM?\ncurl -OJX GET \"https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_001029835.1/download?include_annotation_type=GENOME_FASTA,GENOME_GFF,RNA_FASTA,CDS_FASTA,PROT_FASTA,SEQUENCE_REPORT&amp;filename=GCF_001029835.1.zip\" -H \"Accept: application/zip\"\n# ACC NUM?\ncurl -OJX GET \"https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_001703675.1/download?include_annotation_type=GENOME_FASTA,GENOME_GFF,RNA_FASTA,CDS_FASTA,PROT_FASTA,SEQUENCE_REPORT&amp;filename=GCF_001703675.1.zip\" -H \"Accept: application/zip\"\n# ACC NUM?\ncurl -OJX GET \"https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_002073675.2/download?include_annotation_type=GENOME_FASTA,GENOME_GFF,RNA_FASTA,CDS_FASTA,PROT_FASTA,SEQUENCE_REPORT&amp;filename=GCF_002073675.2.zip\" -H \"Accept: application/zip\"\n# ACC NUM?\ncurl -OJX GET \"https://api.ncbi.nlm.nih.gov/datasets/v2alpha/genome/accession/GCF_000008805.1/download?include_annotation_type=GENOME_FASTA,GENOME_GFF,RNA_FASTA,CDS_FASTA,PROT_FASTA,SEQUENCE_REPORT&amp;filename=GCF_000008805.1.zip\" -H \"Accept: application/zip\"\n</code></pre> <p>On NeSI, a slurm job can be run to process the .fna genomes.  The contents of the slurm job file (<code>unzip_genomes.sl</code>)  are as follows: </p> <pre><code>#!/bin/bash -e\n#SBATCH --account       nesi02659\n#SBATCH --job-name      extract_fna\n#SBATCH --cpus-per-task 8\n#SBATCH --mem           4G\n#SBATCH --time          1:00:00\ndata=$HOME/nm_genomes/*.zip\n\nfor f in $data\ndo\nx=$(basename $f .zip)\necho ${x}\nunzip $x.zip\n\ncp $HOME/nm_genomes/ncbi_dataset/data/${x}/*_genomic.fna /$HOME/nm_genomes/\n\nrm -rf ncbi_dataset\ndone\n</code></pre> <p>The slurm job can be run via:</p> <pre><code>sbatch unzip_genomes.sl\n</code></pre> <p>Remove unneeded files:</p> <pre><code>rm cds_from_genomic.fna\nrm *.zip\nrm README.md\nrm slurm*.out\n</code></pre> <p>Use the <code>cat</code> command to combine genomes into a single fasta file:</p> <pre><code>cat *_genomic.fna &gt; 5NM.fa\n</code></pre> Fix the start point of the input genomes? Fix the start point of the 5NM genomes <p>One tricky aspect is finding a region that is present in all the genomes and is oriented in the same direction The mauve alignment of the 5NM genomes  </p> <p>The Mauve alignment after attempting to fix the start point using the first 50 lines of genome one.  </p> <p>The Mauve alignment after fixing the start point using the first 50 lines of the second genome, which has been aligned with the first 50 lines of genome one. </p>"},{"location":"2_Tools_and_setup/#obtaining-pggb","title":"Obtaining pggb","text":"<p>From https://github.com/pangenome/pggb, you can find the details about installing pggb with Docker, Singularity, bioconda, guix, or by manually building its dependencies.</p>"},{"location":"2_Tools_and_setup/#using-pggb-via-singularity","title":"Using pggb via Singularity","text":"<p>Many managed HPCs utilize Singularity as a secure alternative to docker. Fortunately, docker images can be run through Singularity seamlessly. First pull the docker file and create a Singularity SIF image from the dockerfile. This might take a few minutes. <pre><code>singularity pull docker://ghcr.io/pangenome/pggb:latest\n</code></pre> Next clone the pggb repo and cd into it <pre><code>git clone --recursive https://github.com/pangenome/pggb.git\ncd pggb\n</code></pre> Finally, run pggb from the Singularity image. For Singularity to be able to read and write files to a directory on the host operating system, we need to 'bind' that directory using the -B option and pass the pggb command as an argument. <pre><code>singularity run -B ${PWD}/data:/data ../pggb_latest.sif pggb -i /data/HLA/DRB1-3123.fa.gz -p 70 -s 3000 -G 2000 -n 10 -t 16 -v -V 'gi|568815561:#' -o /data/out -M -m\n</code></pre></p>"},{"location":"2_Tools_and_setup/#neisseria-meningitidis-data-set","title":"Neisseria meningitidis data set","text":"<p>In this workshop, we use the bacterium Neisseria (N.) meningitidis as our model organism.</p>"},{"location":"2_Tools_and_setup/#circlator","title":"Circlator","text":"<p>Bacterial genomes are typically circular, so establishing a fixed starting point for each input genome during pangenome graph construction could reduce unnecessary complexity within the graph. Once the genomes are aligned with the same starting point, we can build their index using samtools faidx and proceed with constructing the pangenome graph. I encourage you to experiment with this approach after this workshop to see how effectively it functions. Please note that it may be necessary to try different regions as a starting point to ensure that all genomes are fixed with the same initial region.</p> <p>let's fix the start for all genome using circlator, submit a slurm job. It takes less than one minute for each sample. </p> <pre><code>#!/bin/bash -e \n#SBATCH --account       nesi02659\n#SBATCH --job-name      restart_fna\n#SBATCH --cpus-per-task 8\n#SBATCH --mem           4G\n#SBATCH --time          1:00:00\nmodule load Circlator/1.5.5-gimkl-2022a-Python-3.10.5\n\ncd /home/zyang/pg_test\ndata=/home/zyang/pg_test/*.fna\n\n#For some dataset, we may have to try different start point to make sure all genomes being fixed with the same region. \nstart_region=start_region.fa\n\nfor f in $data\ndo\nx=$(basename $f .fna)\necho ${x}\ncirclator fixstart --genes_fa  start_region  ${x}.fna  ${x}.restart\n\ndone\n</code></pre> <p>Use the <code>cat</code> command to combine genomes into a single fasta file:</p> <pre><code>cat *_genomic.restart.fasta &gt; 5NMfs.fa\n</code></pre>"},{"location":"2_Tools_and_setup/#setting-up-your-project-directory-and-downloading-the-dataset","title":"Setting up your project directory and downloading the dataset","text":"<p>code</p> <ul> <li>Create a new directory under your home folder and change to that directory. <pre><code>mkdir ~/pg_workshop\n</code></pre> <pre><code>cd ~/pg_workshop\n</code></pre></li> <li><code>~/pg_workshop</code> will be your working directory</li> <li>Keep a note of the absolute path of your working directory <pre><code>pwd\n</code></pre></li> </ul> <p>Output</p> <pre><code>/home/&lt;YOUR_USER_ID&gt;/pg_workshop\n</code></pre> <ul> <li> <p>Please download the dataset.  <pre><code>git clone https://github.com/ZoeYang2020/dataset_for_pg_workshop\n</code></pre></p> </li> <li> <p>Copy the 5NM.fa and  dataset to your working directory (To keep the filenames simple, we have renamed the 5NMfs.fa to 5NM.fa for this workshop) <pre><code>cp ./dataset_for_pg_workshop/5NM.fa ./\n</code></pre></p> </li> </ul>"},{"location":"3_Introduction_to_pggb/","title":"3. Introduction to PGGB","text":""},{"location":"3_Introduction_to_pggb/#variation-graph-and-pggb","title":"Variation graph and PGGB","text":"<p> https://www.bioworld.com/articles/696850-pangenome-gives-more-panoramic-view-of-human-diversity?v=preview</p> <ul> <li> <p>Variation graphs provide a compact representation of genetic variation across a population in the form of bidirected DNA sequence graphs, and they can encompass large-scale structural variants (SVs) such as inversions and duplications.</p> </li> <li> <p>PGGB, the the PanGenome Graph Builder, is a reference-free pangenome graph constuction method. PGGB builds pangenome graphs from a set of input sequences.</p> </li> <li> <p>The main novelty of PGGB  is not just that it doesn't rely on a reference, but more importantly, it can accurately and fully capture every part of the input genomes.</p> </li> </ul>"},{"location":"3_Introduction_to_pggb/#how-does-pggb-work","title":"How does PGGB work?","text":"<ul> <li> <p>PGGB generates graphs using an all-to-all alignment of input sequences (<code>wfmash</code>), graph induction (<code>seqwish</code>), and progressive normalization (<code>smoothxg</code>, <code>gfaffix</code>).</p> </li> <li> <p>Scalable  Graph Construction: The PGGB algorithm is designed to handle large-scale genomes and can efficiently construct genome graphs containing extensive genetic variations.</p> </li> <li> <p>After construction, PGGB generates diagnostic visualizations of the graph (<code>odgi</code>).</p> </li> <li> <p>PGGB writes its output in GFAv1(.gfa) format, which can be used as input by numerous \"genome graph\" and pangenome tools, such as the vg and odgi toolkits. .gfa file is the new data structure for graph references</p> </li> <li> <p>A variant call report (in Variant Call Format - VCF) representing both small and large variants can be generated based on any reference genome included in the graph.</p> </li> </ul>"},{"location":"3_Introduction_to_pggb/#input-fasta-file","title":"Input fasta file","text":""},{"location":"3_Introduction_to_pggb/#all-to-all-alignment","title":"All-to-all alignment","text":"<p>All-to-all alignment refers to the process of aligning all sequences in a given set against each other, rather than aligning them to a single reference sequence. PGGB begins with an alignment using <code>wfmash</code> to align the input genomes. This compares all sequences to each other and finds the best <code>N</code> mappings for each. It produces base-level alignments.</p> <p> </p>"},{"location":"3_Introduction_to_pggb/#inducing-the-graph","title":"Inducing the graph","text":"<p>Graph induction refers to the process of constructing the genome graph by progressively integrating genetic variants into a reference genome. These base-level alignments are converted into a graph with <code>seqwish</code>. A filter is applied to remove short matches, which anchors the graph on confident longer exact matches.</p> <p> </p>"},{"location":"3_Introduction_to_pggb/#normalizing-the-graph-with-smoothxg-and-gfafix","title":"Normalizing the graph with smoothxg and gfafix","text":"<p>This process aims to optimize the structure and representation of the genome graph by resolving redundant or overlapping elements. This step is typically performed after the initial construction of the graph.</p>"},{"location":"3_Introduction_to_pggb/#smoothxg","title":"smoothxg","text":"<p>Through a series of passes over the pangenome, <code>smoothxg</code> reshapes the graph to reduce local complexity and underalignment. This resolves key problems encountered in earlier attempts to implement all-vs-all alignment based graph construction, which typically resulted in very complex, looping, graph motifs at small scales, and redundancy caused by match filtering. The normalization process in PGGB involves several steps, which may vary depending on the specific implementation or version of the tool. Here are some common steps involved in normalizing the graph: 1.  Removal of Redundant Nodes: During the construction of the genome graph, it is possible that some nodes become redundant due to overlapping or repetitive sequences. Normalization involves identifying and removing these redundant nodes, streamlining the graph structure. 2.  Edge Optimization: Edges represent connections between nodes. During normalization, the edges are optimized to minimize redundancy and improve the efficiency of the graph. This can include merging or repositioning edges to create a more streamlined and accurate representation of the genome. </p>"},{"location":"3_Introduction_to_pggb/#gfafix","title":"gfafix","text":"<ol> <li>Compact Representation: Normalization aims to reduce the overall size of the graph by compacting the representation. This can involve compressing repetitive regions or simplifying complex structures while preserving the essential information and variant representation.</li> <li>Graph Refinement: The normalization process also involves refining the graph structure by resolving inconsistencies, correcting errors, and improving the overall quality of the graph representation. This may include resolving conflicts between nodes and edges, addressing mismatches, and ensuring the graph accurately reflects the underlying genetic variations. </li> </ol>"},{"location":"3_Introduction_to_pggb/#multiqc-and-graph-statistics","title":"MultiQC and graph statistics","text":""},{"location":"3_Introduction_to_pggb/#pggb-workflow","title":"PGGB workflow","text":""},{"location":"3_Introduction_to_pggb/#key-parameters","title":"Key parameters","text":"<p>The overall structure of PGGB's output graph is defined by three parameters: genome number (<code>-n</code>), segment length (<code>-s</code>), and pairwise identity (<code>-p</code>). </p> <ul> <li><code>-n</code> : Genome number.</li> <li><code>-s</code> : Segment length defines the seed length used by the \"MashMap3\" homology mapper in wfmash.</li> <li> <p><code>-p</code> : The pairwise identity (-p) is the minimum allowed pairwise identity between seeds. default, 90</p> </li> <li> <p><code>-k</code> : An additional parameter, can also greatly affect graph structure by pruning matches shorter than a given threshold from the initial graph model. In effect, -k N removes any match shorter than Nbp from the initial alignment. This filter removes potentially ambiguous pairwise alignments from consideration in establishing the initial scaffold of the graph. default 19</p> </li> </ul>"},{"location":"3_Introduction_to_pggb/#other-parameters-for-executing-pggb","title":"Other parameters for executing PGGB","text":"<ul> <li> <p><code>-S</code> : Generate statistics of the seqwish and smoothxg graph</p> </li> <li> <p><code>-m</code> : Generates MultiQC report of graphs' statistics and visualizations, automatically runs odgi stats</p> </li> <li> <p><code>-V</code> : Specify a path to generate a VCF from the graph. </p> </li> <li> <p><code>-o</code>, <code>--output-dir PATH</code> : Output directory</p> </li> </ul>"},{"location":"3_Introduction_to_pggb/#examples-of-key-parameters-for-executing-pggb","title":"Examples of key parameters for executing PGGB","text":"<ul> <li>Human, whole genome, 90 haplotypes: <code>pggb -p 98 -s 50k -n 90 -k 79 ...</code></li> <li>15 helicobacter genomes, 5% divergence: <code>pggb -p 90 -n 15 -k 79 ....</code></li> <li>Yeast genomes, 5% divergence: PGGB's defaults should work well, just set -n.</li> <li>Aligning 9 Major Histocompatibility Complex (MHC) class II assemblies from vertebrate genomes (5-10% divergence): <code>pggb -p 90 -n 9 -k 29 ...</code></li> <li>A few thousand bacterial genomes <code>pggb -x auto -n 2146 ...</code>. In general mapping sparsification (<code>-x auto</code>) is a good idea when you have many hundreds to thousands of genomes.</li> </ul>"},{"location":"4_Running_pggb/","title":"4. Running PGGB","text":""},{"location":"4_Running_pggb/#learning-objectives","title":"Learning objectives","text":"<p>Build pangenome graphs using PGGB</p>"},{"location":"4_Running_pggb/#getting-started","title":"Getting started","text":"<p>NeSI HPC environment is used for the analysis. Please make sure you have a NeSI account and you are able to login.</p>"},{"location":"4_Running_pggb/#construct-pangenome-graph-for-the-five-neisseria-meningitidis-genomes","title":"Construct pangenome graph for the five Neisseria meningitidis genomes","text":"<p>Create an index for the sequence using SAMtools and check.</p> <p>code</p> <p><pre><code>module purge\nmodule load SAMtools/1.16.1-GCC-11.3.0\n</code></pre> <pre><code>samtools faidx 5NM.fa\n</code></pre></p> <p>Inspect the index.</p> <p>code</p> <pre><code>more 5NM.fa.fai\n</code></pre> <p>Output</p> <pre><code>NC_003112.2     2272360 60      60  61\nNC_017518.1     2248966 2310357 60  61\nNZ_CP007668.1   2324822 4596878 60  61\nNZ_CP016880.1   2207174 6960511 60  61\nNZ_CP020423.2   2244886 9204558 60  61\n</code></pre>"},{"location":"4_Running_pggb/#running-pggb","title":"Running PGGB","text":""},{"location":"4_Running_pggb/#use-mash-triangle-to-check-the-pairwise-identity-of-the-input-genomes-which-will-give-us-some-idea-how-to-set-p","title":"Use <code>mash triangle</code> to check the pairwise identity of the input genomes, which will give us some idea how to set <code>-p</code>","text":"<p>code</p> <p><pre><code>module purge\nmodule load Mash/2.3-GCC-11.3.0\n</code></pre> <pre><code>mash triangle 5NM.fa &gt; 5NM.fa_mash\n</code></pre></p> <ul> <li>Inspect the output <pre><code>more 5NM.fa_mash\n</code></pre></li> </ul> Output <pre><code>        5\nNC_003112.2\nNC_017518.1     0.0152404\nNZ_CP007668.1   0.0149234       0.00635099\nNZ_CP016880.1   0.0178909       0.0171265       0.0170111\nNZ_CP020423.2   0.0190552       0.0194352       0.0185579       0.0106974\n</code></pre> <p>The lower triangle represents the pairwise distances between the 5NM genomes. We can observe that the largest paired distance is 0.0190552, which is approximately 0.02. Considering that lower values indicate better alignment, we are going to use an alignment threshold of <code>-p 94</code> for constructing the pangenome graph.  </p> <p>Please keep in mind that for each dataset, we may need to test different settings to find a relatively good setting.</p>"},{"location":"4_Running_pggb/#executing-pggb","title":"Executing <code>pggb</code>","text":"<p>code</p> <pre><code>module purge\nmodule load pggb/0.5.3-Miniconda3\n</code></pre> <ul> <li>Execute <code>pggb --help</code> to check the command list of PGGB. <pre><code>pggb --help\n</code></pre></li> </ul> Output <pre><code>ERROR: mandatory arguments -i and -n\nERROR: -n must be greater than or equal to 2\nusage: /usr/local/bin/pggb -i &lt;input-fasta&gt; -n &lt;n-haplotypes&gt; [options]\noptions:\n   [wfmash]\n-i, --input-fasta FILE      input FASTA/FASTQ file\n    -s, --segment-length N      segment length for mapping [default: 5000]\n-l, --block-length N        minimum block length filter for mapping [default: 5*segment-length]\n-p, --map-pct-id PCT        percent identity for mapping/alignment [default: 90]\n-n, --n-haplotypes N        number of haplotypes\n    -N, --no-split              disable splitting of input sequences during mapping [default: enabled]\n-x, --sparse-map N          keep this fraction of mappings ('auto' for giant component heuristic) [default: 1.0]\n-K, --mash-kmer N           kmer size for mapping [default: 19]\n-F, --mash-kmer-thres N     ignore the top % most-frequent kmers [default: 0.001]\n-Y, --exclude-delim C       skip mappings between sequences with the same name prefix before\n                                the given delimiter character [default: all-vs-all and !self]\n[seqwish]\n-k, --min-match-len N       filter exact matches below this length [default: 19]\n-f, --sparse-factor N       keep this randomly selected fraction of input matches [default: no sparsification]\n-B, --transclose-batch      number of bp to use for transitive closure batch [default: 10000000]\n[smoothxg]\n-X, --skip-normalization    do not normalize the final graph [default: normalize the graph]\n-H, --n-haplotypes-smooth N number of haplotypes, if different than that set with -n [default: -n]\n-j, --path-jump-max         maximum path jump to include in block [default: 0]\n-e, --edge-jump-max N       maximum edge jump before breaking [default: 0]\n-G, --poa-length-target N,M target sequence length for POA, one per pass [default: 700,900,1100]\n-P, --poa-params PARAMS     score parameters for POA in the form of match,mismatch,gap1,ext1,gap2,ext2\n                                may also be given as presets: asm5, asm10, asm15, asm20\n                                [default: 1,19,39,3,81,1 = asm5]\n-O, --poa-padding N         pad each end of each sequence in POA with N*(mean_seq_len) bp [default: 0.001]\n-d, --pad-max-depth N       depth/haplotype at which we don't pad the POA problem [default: 100]\n    -b, --run-abpoa             run abPOA [default: SPOA]\n    -z, --global-poa            run the POA in global mode [default: local mode]\n    -M, --write-maf             write MAF output representing merged POA blocks [default: off]\n    -Q, --consensus-prefix P    use this prefix for consensus path names [default: Consensus_]\n   [odgi]\n    -v, --skip-viz              don't render visualizations of the graph in 1D and 2D [default: make them]\n-S, --stats                 generate statistics of the seqwish and smoothxg graph [default: off]\n[vg]\n-V, --vcf-spec SPEC         specify a set of VCFs to produce with SPEC = REF:DELIM[:LEN][,REF:DELIM:[LEN]]*\n                                the paths matching ^REF are used as a reference, while the sample haplotypes\n                                are derived from path names, e.g. when DELIM=# and with '-V chm13:#',\na path named HG002#1#ctg would be assigned to sample HG002 phase 1.\n                                If LEN is specified and greater than 0, the VCFs are decomposed, filtering\n                                sites whose max allele length is greater than LEN. [default: off]\n[multiqc]\n-m, --multiqc               generate MultiQC report of graphs' statistics and visualizations,\n                                automatically runs odgi stats [default: off]\n[general]\n-o, --output-dir PATH       output directory\n    -D, --temp-dir PATH         directory for temporary files\n    -a, --input-paf FILE        input PAF file; the wfmash alignment step is skipped\n    -r, --resume                do not overwrite existing outputs in the given directory\n                                [default: start pipeline from scratch]\n-t, --threads N             number of compute threads to use in parallel steps [default: 72]\n-T, --poa-threads N         number of compute threads to use during POA (set lower if you OOM during smoothing)\n-A, --keep-temp-files       keep intermediate graphs\n    -Z, --compress              compress alignment (.paf), graph (.gfa, .og), and MSA (.maf) outputs with pigz,\n                                and variant (.vcf) outputs with bgzip\n    --version                   display the version of pggb\n    -h, --help                  this text\n\nUse wfmash, seqwish, smoothxg, odgi, gfaffix, and vg to build, project and display a pangenome graph.\n</code></pre>"},{"location":"4_Running_pggb/#construct-pangenome-graph-for-5nm-genomes-with-s-2000-p-94-k-19-or-k-35","title":"Construct pangenome graph for 5NM genomes with <code>-s 2000</code>, <code>-p 94</code>, <code>-k 19  or -k 35</code>","text":"<p>code</p> <pre><code>module purge\nmodule load pggb/0.5.3-Miniconda3\n</code></pre> <ul> <li> <p>Execute <code>pggb</code>, set <code>-s 2000</code> and <code>-p 94</code> <pre><code>pggb -i 5NM.fa -s 2000 -p 94 -n 5 -t 16 -S -m -o 5NM_2Kb94 -V 'NC_017518.1:#'\n</code></pre></p> </li> <li> <p>let's Execute pggb again, using the same setting <code>-s 2000</code> and <code>-p 94</code>, but increase <code>-k</code> to <code>35</code> <pre><code>pggb -i 5NM.fa -s 2000 -p 94 -n 5 -t 16 -S -m -k 35 -o 5NM_2Kb94_k35 -V 'NC_017518.1:#'\n</code></pre></p> </li> </ul>"},{"location":"4_Running_pggb/#extened-learning-running-pggb-as-a-slurm-job","title":"Extened learning: Running <code>pggb</code> as a Slurm Job","text":"<p>Please do NOT run the code below, this is an example for power users</p> <p>Executing shell scripts in a HPC  might not be the best way to handle larger files which will require large memory, CPU power and time.  We can modify the previously explained script as below to run as Slurm job. Note the additional parameters specified by <code>#SBATCH</code> which will indicate maximum resource limitations. </p> <p>The following is a SLURM script (<code>pggb_5NM_2k94.sl</code>) for PGGB with <code>-s 2000</code> and <code>-p 94</code></p> <pre><code>#!/bin/bash -e     \n#SBATCH --account       nesi02659\n#SBATCH --job-name      pggb_5NM\n#SBATCH --cpus-per-task 16\n#SBATCH --mem           16G\n#SBATCH --time          1:00:00\n#SBATCH --error         %x_%j.err\n#SBATCH --output        %x_%j.out\n# Modules\nmodule purge\nmodule load pggb/0.5.3-Miniconda3    # Variables\nWD=~/pg_workshop #Working Directory\ndata=${WD}/5NM.fa  # Run PGGB\n# 2K94\npggb -i $data -s 2000 -p 94 -n 5 -t $SLURM_CPUS_PER_TASK -S -m -o $WD/5NM_2Kb94 -V 'NC_017518.1:#'\n</code></pre> <p>The job can be submitted using the <code>sbatch</code> command as follows. Take a note of the job ID for tracking the run.</p> <pre><code>sbatch pggb_5NM_2k94.sl\n</code></pre>"},{"location":"5_Evaluating_pggb_output/","title":"5. Evaluating output","text":"<ul> <li>When we ran PGGB, the 'odgi stats -S' option was utilized to generate statistics for both the seqwish and smoothxg graphs and the 'multiqc -m' option was employed to generate a MultiQC report, providing comprehensive statistics and visualizations of the graphs. All pertinent results can be located in the MultiQC report, which is saved in HTML format.</li> <li>The output folder contains all the PGGB-related results, including the .smooth.final.og and all associated visualization figures. It also includes .final.smooth.gfa (a Graphical Fragment Assembly file), as well as variations of the graph presented in a VCF (Variant Call Format) file</li> </ul>"},{"location":"5_Evaluating_pggb_output/#check-the-files","title":"check the files","text":"<p>code</p> <p><pre><code>cd  ~/pg_workshop/5NM_2Kb94\n</code></pre> <pre><code>ls  \n</code></pre></p> Output <pre><code>5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.07-24-2023_10:49:02.log         5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.07-24-2023_10:49:02.params.yml  5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.gfa                       5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.NC_017518.1.vcf           5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.NC_017518.1.vcf.stats     5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og                        5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.lay                    5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.lay.draw_multiqc.png   5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.lay.draw.png           5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.lay.tsv                5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.stats.yaml             5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_depth_multiqc.png\n5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_inv_multiqc.png\n5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_multiqc.png\n5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_O_multiqc.png\n5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_pos_multiqc.png\n5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_uncalled_multiqc.png\n5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.fix.affixes.tsv.gz\n5NM.fa.fefc7f5.417fcdf.seqwish.og.stats.yaml\n5NM.fa.fefc7f5.alignments.wfmash.paf\nmultiqc_config.yaml\nmultiqc_data\nmultiqc_report.html\n</code></pre>"},{"location":"5_Evaluating_pggb_output/#check-the-gfa-file","title":"check the .gfa file.","text":"<ul> <li>(Graphical Fragment Assembly) GFA is a file format commonly used to represent assembly graphs or sequence variation graphs</li> </ul> <p>code</p> <pre><code>head 5NM*.gfa |less -S </code></pre> Output <pre><code>H       VN:Z:1.0\nS       1       ATCCGCCCGACCAAGAAGGCATTTTGGAACTACACATCCGCAGGCGCAAAAACGGTGTCTGCTCGGAAATGATTTTCGGCAGCGAACCCAAAGTCAAAGAAAAAGGCATCGTCCG\nL       1       +       4       +       0M\nS       2       CGAAATTGTTTCTTTGTCCGTTTGCGATGTTTTTTAGCTTTGGGGCAGTCGAGAATCACGCCGCTCGTTCGGCTTGTGTAACTGATGTTTTTATGCCCCCTTATCTAACAGGGGG\nL       2       +       133478  +       0M\nS       3       TCCATTGGGGCAAGGCCGCCGCGCCGACCGGTTTGGCTTCCCACACTTCCCCCTTTGCCGCCAATGCGGCAAACCATTTGGACTGGAGCTGGGTTTTCTCCAGTTTGGGCAGCAA\nL       3       +       175915  +       0M\nS       4       G\nL       4       +       5       +       0M\nS       5       CCATCGGACGCTTGGACATCAACACCAGCGGACTTCTGATTCT\n</code></pre> <pre><code>tail 5NM*.gfa |less -S </code></pre> output <pre><code>S       246216  G\nL       246216  +       246135  +       0M\nL       246216  +       246217  +       0M\nS       246217  GAC\nL       246217  +       246136  +       0M\nP       NC_003112.2     85316+,85318+,85319+,85321+,85322+,85323+,85325+,85327+,85328+,85330+,85331+,85333+,85334+,85336+,85337+,85\nP       NC_017518.1     85316+,85317+,85319+,85320+,85322+,85323+,85325+,85326+,85328+,85329+,85331+,85332+,85334+,85335+,85337+,85\nP       NZ_CP007668.1   1+,4+,5+,6+,8+,9+,11+,12+,14+,15+,17+,18+,20+,21+,23+,25+,26+,27+,29+,31+,32+,34+,35+,37+,38+,39+,41+,43+,4\nP       NZ_CP016880.1   2+,133478+,133479+,133481+,133482+,133483+,133485+,133486+,133488+,133489+,133490+,133492+,133493+,133495+,\nP       NZ_CP020423.2   3+,175915+,175916+,175918+,175919+,175921+,175922+,175924+,175925+,175926+,175928+,175929+,175931+,175932+,\n</code></pre> what does S, L, P mean <p><code>S</code> means DNA segments, <code>L</code> means links between notes, and <code>P</code> means paths</p>"},{"location":"5_Evaluating_pggb_output/#pangenome-graph-visualization-using-odgi","title":"Pangenome graph visualization using ODGI","text":""},{"location":"5_Evaluating_pggb_output/#odgi-compressed-1d-visualization","title":"ODGI Compressed 1D visualization","text":"<p>This image shows a 1D rendering of the built pangenome graph. The graph nodes are arranged from left to right, forming the pangenome sequence. Summarization of path coverage across all paths. Dark blue means highest coverage. Dark red means lowest coverage. The path names are placed on the left. The black lines under the paths are the links, which represent the graph topology.</p> <p>ODGI Compressed 1D visualization </p> <pre><code>odgi viz -i ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og -o ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_O_multiqc_1.png -x 1500 -y 500 -a 10 -O -I Consensus_  </code></pre>"},{"location":"5_Evaluating_pggb_output/#odgi-1d-visualization","title":"ODGI 1D visualization","text":"<p>This image shows a 1D rendering of the built pangenome graph. The graph nodes are arranged from left to right, forming the pangenome sequence. The colored bars represent the paths versus the pangenome sequence in a binary matrix. The path names are placed on the left. The black lines under the paths are the links, which represent the graph topology.</p> <p>ODGI Compressed 1D visualization</p> <pre><code>odgi viz -i ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og -o ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_multiqc_1.png -x 1500 -y 500 -a 10 -I Consensus_  </code></pre>"},{"location":"5_Evaluating_pggb_output/#odgi-1d-visualization-by-path-position","title":"ODGI 1D visualization by path position","text":"<p>This shows a 1D rendering of the built pangenome graph where the paths are colored according to their nucleotide position. Light grey means a low path position, black is the highest path position.</p> <p>ODGI Compressed 1D visualization</p> <pre><code>odgi viz -i ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og -o ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_pos_multiqc_1.png -x 1500 -y 500 -a 10 -u -d -I Consensus_ </code></pre>"},{"location":"5_Evaluating_pggb_output/#odgi-1d-visualization-by-path-orientation","title":"ODGI 1D visualization by path orientation","text":"<p> This image shows a 1D rendering of the built pangenome graph where the paths are colored by orientation. Forward is black, reverse is red.</p> <p>ODGI Compressed 1D visualization</p> <pre><code>odgi viz -i ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og -o ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_inv_multiqc_1.png -x 1500 -y 500 -a 10 -z -I Consensus_\n</code></pre>"},{"location":"5_Evaluating_pggb_output/#1d-visualization-by-node-depth","title":"1D visualization by node depth","text":"<p> This shows a 1D rendering of the built pangenome graph where the paths are colored according to path depth. Using the Spectra color palette with 4 levels of path depths, white indicates no depth, while grey, red, and yellow indicate depth 1, 2, and greater than or equal to 3, respectively.</p> <p>ODGI Compressed 1D visualization </p> <pre><code>odgi viz -i ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og -o ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_depth_multiqc_1.png -x 1500 -y 500 -a 10 -m -I Consensus_ </code></pre>"},{"location":"5_Evaluating_pggb_output/#odgi-1d-visualization-by-uncalled-bases","title":"ODGI 1D visualization by uncalled bases","text":"<p> This shows a 1D rendering of the built pangenome graph where the paths are colored according to the coverage of uncalled bases. The lighter the green, the higher the 'N' content of a node is.</p> <p>ODGI Compressed 1D visualization </p> <pre><code>odgi viz -i ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og -o ./5NM.fa.fefc7f5.417fcdf.e2ae00b.smooth.final.og.viz_uncalled_multiqc_1.png -x 1500 -y 500 -a 10 -N -I Consensus_ </code></pre>"},{"location":"5_Evaluating_pggb_output/#odgi-2d-drawing","title":"ODGI 2D drawing","text":"<p>how to generate graph 2D visualization using odgi</p> <ul> <li> <p>Compute the layout first <pre><code>odgi layout -i graph.og -o graph.layout.lay -P -t 16\n</code></pre></p> </li> <li> <p>Retrieve the image <pre><code>odgi draw -i graph.og -c graph.layout.lay -p graph.2D.png </code></pre></p> </li> </ul> Generate graph 2D visualization using gfaestus <p>https://github.com/chfi/gfaestus once you have it installed, you can use the following command to generate 2D visulization for a graph </p> <pre><code>gfaestus ${x}.gfa ${x}.gfa.tsv\n</code></pre> <p></p>"},{"location":"5_Evaluating_pggb_output/#check-the-statistics-statistics-for-both-the-seqwish-and-smoothxg-graphs","title":"Check the statistics statistics for both the seqwish and smoothxg graphs","text":""},{"location":"5_Evaluating_pggb_output/#5nm-s-2000-p-94-k-default","title":"5NM -s 2000, -p 94, -k default","text":"Sample Name Length Nodes Edges Paths Components A C T G N seqwish 3213544 122575 164967 5 1 796617 815725 800622 800480 100 smooth 2964772 246887 332917 5 1 745161 757008 737404 725099 100"},{"location":"5_Evaluating_pggb_output/#5nm-s-2000-p-94-k-35","title":"5NM -s 2000, -p 94, -k 35","text":"Sample Name Length Nodes Edges Paths Components A C T G N seqwish 3488559 92375 124130 5 1 861063 890024 863665 873707 100 smooth 2998035 241280 325338 5 1 752650 765699 745759 733827 100"},{"location":"6_Variant_calling/","title":"6. Variant calling","text":"<ul> <li>To detect both small and large variants among paths from the pangenome graph, we utilized the Variation Graph (VG) toolkit to deconstruct these variants into VCF files.</li> <li>To decompose the graph into a VCF file, we need to choose one path as a reference for comparison with the others (any path can serve as this reference)</li> <li>In fact, during the pangenome graph construction process, when the parameter -V 'NC_017518.1:#' is activated, the output file includes the VCF based on the NC_017518.1 reference.</li> </ul>"},{"location":"6_Variant_calling/#vg-deconstruct-graph-to-get-the-variations-in-vcf","title":"<code>vg deconstruct</code> graph to get the variations in vcf","text":"<p>Set up directory for VG and GFA files.</p> <p>code</p> <ul> <li> <p>Return to working directory <pre><code>cd ~/pg_workshop\n</code></pre></p> </li> <li> <p>Create VG directory <pre><code>mkdir -p vg_deconstruct\n</code></pre></p> </li> <li> <p>Copy the gfa file to the directory <pre><code>cp ./5NM_2Kb94/5NM*.gfa ./vg_deconstruct/5NM_2Kb94.gfa\ncp ./5NM_2Kb94_k35/5NM*.gfa ././vg_deconstruct/5NM_2Kb94_k35.gfa\ncd ./vg_deconstruct\n</code></pre></p> </li> </ul> <p>Load the necessary modules for an example run.</p> <p>code</p> <pre><code>module purge\nmodule load vg/1.46.0\nmodule load BCFtools/1.15.1-GCC-11.3.0\n</code></pre> <p>An example run to obtain VCF files from GFA.</p> <p>code</p> <ul> <li>check the paths in the graph using tail, which depends on the number of genomes. We have five input genomes for the 5NM dataset.  <pre><code>tail -5 5NM_2Kb94.gfa | less -Sail -5 5NM_2k94.gfa | less -S\n</code></pre></li> </ul> <p>Output</p> <pre><code>P       NC_003112.2     85316+,85318+,85319+,85321+,85322+,85323+,85325+,85327+,85328+,85330+,85331+,85333+,85334+,85336+,85337+,85\nP       NC_017518.1     85316+,85317+,85319+,85320+,85322+,85323+,85325+,85326+,85328+,85329+,85331+,85332+,85334+,85335+,85337+,85\nP       NZ_CP007668.1   1+,4+,5+,6+,8+,9+,11+,12+,14+,15+,17+,18+,20+,21+,23+,25+,26+,27+,29+,31+,32+,34+,35+,37+,38+,39+,41+,43+,4\nP       NZ_CP016880.1   2+,133478+,133479+,133481+,133482+,133483+,133485+,133486+,133488+,133489+,133490+,133492+,133493+,133495+,\nP       NZ_CP020423.2   3+,175915+,175916+,175918+,175919+,175921+,175922+,175924+,175925+,175926+,175928+,175929+,175931+,175932+, 81\n</code></pre> <p>code</p> <pre><code>#use vg deconstruct the graph into VCF based on the first path NC_003112.2\n#-e, --path-traversals    Only consider traversals that correspond to paths in the graph.\n#-a, --all-snarls         Process all snarls, including nested snarls (by default only top-level snarls reported).\n#-H, --path-sep SEP       Obtain alt paths from the set of paths, assuming a path name hierarchy (e.g. SEP='#' and sample#phase#contig)\n</code></pre> <ul> <li> <p>vg deconstruct for the 5NM_2Kb94.gfa using the path NC_003112.2 as reference  <pre><code>vg deconstruct -p NC_003112.2 -a -e -H AAAA ./5NM_2Kb94.gfa &gt; 5NM_2Kb94aep1.vcf\n</code></pre></p> </li> <li> <p>use bcftools stats to check the statistics for the vcf file  <pre><code>bcftools stats 5NM_2Kb94aep1.vcf &gt; 5NM_2Kb94aep1.vcf_stats\n</code></pre></p> </li> <li> <p>vg deconstruct for the 5NM_2Kb94_k35.gfa <pre><code>vg deconstruct -p NC_003112.2 -a -e -H AAAA ./5NM_2Kb94_k35.gfa &gt; 5NM_2Kb94_k35aep1.vcf\n</code></pre></p> </li> <li> <p>use bcftools stats to check the statistics for the vcf file  <pre><code>bcftools stats 5NM_2Kb94_k35aep1.vcf &gt; 5NM_2Kb94_k35aep1.vcf_stats    \n</code></pre></p> </li> <li> <p>use vg deconstruct the graph into VCF based on the second path NC_017518.1 <pre><code>vg deconstruct -p NC_017518.1 -a -e -H AAAA ./5NM_2Kb94.gfa &gt; 5NM_2Kb94aep2.vcf\n</code></pre></p> </li> <li> <p>use bcftools stats to check the statistics for the vcf file  <pre><code>bcftools stats 5NM_2Kb94aep2.vcf &gt; 5NM_2Kb94aep2.vcf_stats\n</code></pre></p> </li> </ul>"},{"location":"6_Variant_calling/#check-the-vcf-files","title":"check the vcf files","text":"<p>check the statistics of vcf files</p> <pre><code>less -S 5NM_2Kb94aep1.vcf_stats\n</code></pre> Output <pre><code># This file was produced by bcftools stats (1.15.1+htslib-1.15.1) and can be plotted using plot-vcfstats.\n# The command line was: bcftools stats  5NM_2Kb94aep1.vcf\n#\n# Definition of s  ets:\n# ID    [2]id   [3]tab-separated file names\nID      0       5NM_2Kb94aep1.vcf\n# SN, Summary numbers:\n#   number of records   .. number of data rows in the VCF\n#   number of no-ALTs   .. reference-only sites, ALT is either \".\" or identical to REF\n#   number of SNPs      .. number of rows with a SNP\n#   number of MNPs      .. number of rows with a MNP, such as CC&gt;TT\n#   number of indels    .. number of rows with an indel\n#   number of others    .. number of rows with other type, for example a symbolic allele or\n#                          a complex substitution, such as ACT&gt;TCGA\n#   number of multiallelic sites     .. number of rows with multiple alternate alleles\n#   number of multiallelic SNP sites .. number of rows with multiple alternate alleles, all SNPs\n# \n#   Note that rows containing multiple types will be counted multiple times, in each\n#   counter. For example, a row with a SNP and an indel increments both the SNP and\n#   the indel counter.\n# \n# SN    [2]id   [3]key  [4]value\nSN      0       number of samples:      4\nSN      0       number of records:      76185\nSN      0       number of no-ALTs:      0\nSN      0       number of SNPs: 66461\nSN      0       number of MNPs: 7044\nSN      0       number of indels:       3458\nSN      0       number of others:       995\nSN      0       number of multiallelic sites:   3735\nSN      0       number of multiallelic SNP sites:       1350\n</code></pre> <p></p> <p>check the statistics of vcf files</p> <pre><code>less -S 5NM_2Kb94_k35aep1.vcf_stats\n</code></pre> Output <pre><code>#only show the number of each type of variations\nSN      0       number of samples:      4\nSN      0       number of records:      74293\nSN      0       number of no-ALTs:      0\nSN      0       number of SNPs: 64666\nSN      0       number of MNPs: 6963\nSN      0       number of indels:       3428\nSN      0       number of others:       1031\nSN      0       number of multiallelic sites:   3798\nSN      0       number of multiallelic SNP sites:       1290\n</code></pre> <p></p> <p>Inspect the vcf files</p> <pre><code>head -100 5NM_2Kb94aep1.vcf |less -s </code></pre> Output <pre><code>##fileformat=VCFv4.2\n##FORMAT=&lt;ID=GT,Number=1,Type=String,Description=\"Genotype\"&gt;\n##INFO=&lt;ID=AC,Number=A,Type=Integer,Description=\"Total number of alternate alleles in called genotypes\"&gt;\n##INFO=&lt;ID=AF,Number=A,Type=Float,Description=\"Estimated allele frequency in the range (0,1]\"&gt;\n##INFO=&lt;ID=NS,Number=1,Type=Integer,Description=\"Number of samples with data\"&gt;\n##INFO=&lt;ID=AN,Number=1,Type=Integer,Description=\"Total number of alleles in called genotypes\"&gt;\n##INFO=&lt;ID=LV,Number=1,Type=Integer,Description=\"Level in the snarl tree (0=top level)\"&gt;\n##INFO=&lt;ID=PS,Number=1,Type=String,Description=\"ID of variant corresponding to parent snarl\"&gt;\n##INFO=&lt;ID=AT,Number=R,Type=String,Description=\"Allele Traversal as path in graph\"&gt;\n##contig=&lt;ID=NC_003112.2,length=2272360&gt;\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  NC_017518.1     NZ_CP007668.1   NZ_CP016880.1   NZ_CP020423.2\nNC_003112.2     152     &gt;1&gt;4    C       T       60      .       AC=2;AF=0.5;AN=4;AT=&gt;1&gt;3&gt;4,&gt;1&gt;2&gt;4;NS=4;LV=0     GT      1       1       0       0\nNC_003112.2     510     &gt;4&gt;7    A       G       60      .       AC=2;AF=0.5;AN=4;AT=&gt;4&gt;6&gt;7,&gt;4&gt;5&gt;7;NS=4;LV=0     GT      0       0       1       1\nNC_003112.2     558     &gt;7&gt;10   A       G       60      .       AC=2;AF=0.5;AN=4;AT=&gt;7&gt;9&gt;10,&gt;7&gt;8&gt;10;NS=4;LV=0   GT      0       0       1       1\nNC_003112.2     954     &gt;10&gt;13  G       A       60      .       AC=2;AF=0.5;AN=4;AT=&gt;10&gt;11&gt;13,&gt;10&gt;12&gt;13;NS=4;LV=0       GT      1       1       0       0\nNC_003112.2     1139    &gt;13&gt;16  A       G       60      .       AC=1;AF=0.25;AN=4;AT=&gt;13&gt;14&gt;16,&gt;13&gt;15&gt;16;NS=4;LV=0      GT      0       0       1       0\nNC_003112.2     1411    &gt;16&gt;19  G       A       60      .       AC=2;AF=0.5;AN=4;AT=&gt;16&gt;18&gt;19,&gt;16&gt;17&gt;19;NS=4;LV=0       GT      1       1       0       0\nNC_003112.2     1539    &gt;19&gt;22  T       C       60      .       AC=2;AF=0.5;AN=4;AT=&gt;19&gt;21&gt;22,&gt;19&gt;20&gt;22;NS=4;LV=0       GT      1       1       0       0\nNC_003112.2     1561    &gt;22&gt;25  A       G       60      .       AC=4;AF=1;AN=4;AT=&gt;22&gt;23&gt;25,&gt;22&gt;24&gt;25;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     1630    &gt;25&gt;28  G       C       60      .       AC=4;AF=1;AN=4;AT=&gt;25&gt;26&gt;28,&gt;25&gt;27&gt;28;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     1674    &gt;28&gt;31  T       C       60      .       AC=4;AF=1;AN=4;AT=&gt;28&gt;29&gt;31,&gt;28&gt;30&gt;31;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     1781    &gt;31&gt;34  A       G       60      .       AC=4;AF=1;AN=4;AT=&gt;31&gt;32&gt;34,&gt;31&gt;33&gt;34;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     1809    &gt;34&gt;36  AT      A       60      .       AC=4;AF=1;AN=4;AT=&gt;34&gt;35&gt;36,&gt;34&gt;36;NS=4;LV=0    GT      1       1       1       1\nNC_003112.2     1819    &gt;36&gt;38  AT      A       60      .       AC=4;AF=1;AN=4;AT=&gt;36&gt;37&gt;38,&gt;36&gt;38;NS=4;LV=0    GT      1       1       1       1\nNC_003112.2     1894    &gt;38&gt;41  G       C       60      .       AC=4;AF=1;AN=4;AT=&gt;38&gt;39&gt;41,&gt;38&gt;40&gt;41;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     1909    &gt;41&gt;44  A       G       60      .       AC=4;AF=1;AN=4;AT=&gt;41&gt;42&gt;44,&gt;41&gt;43&gt;44;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     1974    &gt;44&gt;47  A       G       60      .       AC=4;AF=1;AN=4;AT=&gt;44&gt;45&gt;47,&gt;44&gt;46&gt;47;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2069    &gt;47&gt;50  A       G       60      .       AC=4;AF=1;AN=4;AT=&gt;47&gt;48&gt;50,&gt;47&gt;49&gt;50;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2073    &gt;50&gt;53  T       C       60      .       AC=2;AF=0.5;AN=4;AT=&gt;50&gt;51&gt;53,&gt;50&gt;52&gt;53;NS=4;LV=0       GT      0       0       1       1\nNC_003112.2     2079    &gt;53&gt;56  T       C       60      .       AC=4;AF=1;AN=4;AT=&gt;53&gt;54&gt;56,&gt;53&gt;55&gt;56;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2084    &gt;56&gt;59  AT      GG      60      .       AC=4;AF=1;AN=4;AT=&gt;56&gt;57&gt;59,&gt;56&gt;58&gt;59;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2089    &gt;59&gt;62  T       C       60      .       AC=4;AF=1;AN=4;AT=&gt;59&gt;60&gt;62,&gt;59&gt;61&gt;62;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2099    &gt;62&gt;64  A       AC      60      .       AC=4;AF=1;AN=4;AT=&gt;62&gt;64,&gt;62&gt;63&gt;64;NS=4;LV=0    GT      1       1       1       1\nNC_003112.2     2178    &gt;64&gt;67  G       A       60      .       AC=4;AF=1;AN=4;AT=&gt;64&gt;65&gt;67,&gt;64&gt;66&gt;67;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2200    &gt;67&gt;70  A       G       60      .       AC=4;AF=1;AN=4;AT=&gt;67&gt;68&gt;70,&gt;67&gt;69&gt;70;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2290    &gt;70&gt;73  C       T       60      .       AC=4;AF=1;AN=4;AT=&gt;70&gt;71&gt;73,&gt;70&gt;72&gt;73;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2359    &gt;73&gt;76  T       C       60      .       AC=4;AF=1;AN=4;AT=&gt;73&gt;74&gt;76,&gt;73&gt;75&gt;76;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2362    &gt;76&gt;79  C       T       60      .       AC=4;AF=1;AN=4;AT=&gt;76&gt;77&gt;79,&gt;76&gt;78&gt;79;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2392    &gt;79&gt;84  CG      AG,AA   60      .       AC=2,2;AF=0.5,0.5;AN=4;AT=&gt;79&gt;80&gt;82&gt;84,&gt;79&gt;81&gt;82&gt;84,&gt;79&gt;81&gt;83&gt;84;NS=4;LV=0      GT      2       2       1       1\nNC_003112.2     2491    &gt;84&gt;87  G       A       60      .       AC=2;AF=0.5;AN=4;AT=&gt;84&gt;85&gt;87,&gt;84&gt;86&gt;87;NS=4;LV=0       GT      0       0       1       1\nNC_003112.2     2494    &gt;87&gt;90  T       C       60      .       AC=2;AF=0.5;AN=4;AT=&gt;87&gt;88&gt;90,&gt;87&gt;89&gt;90;NS=4;LV=0       GT      0       0       1       1\nNC_003112.2     2503    &gt;90&gt;93  A       C       60      .       AC=4;AF=1;AN=4;AT=&gt;90&gt;91&gt;93,&gt;90&gt;92&gt;93;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2507    &gt;93&gt;96  G       A       60      .       AC=4;AF=1;AN=4;AT=&gt;93&gt;94&gt;96,&gt;93&gt;95&gt;96;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2515    &gt;96&gt;99  T       C       60      .       AC=4;AF=1;AN=4;AT=&gt;96&gt;97&gt;99,&gt;96&gt;98&gt;99;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2520    &gt;99&gt;101 CA      C       60      .       AC=4;AF=1;AN=4;AT=&gt;99&gt;100&gt;101,&gt;99&gt;101;NS=4;LV=0 GT      1       1       1       1\nNC_003112.2     2523    &gt;101&gt;106        CC      CAA,CAG 60      .       AC=3,1;AF=0.75,0.25;AN=4;AT=&gt;101&gt;102&gt;106,&gt;101&gt;103&gt;105&gt;106,&gt;101&gt;103&gt;104&gt;106;NS=4;LV=0    GT      2       1       1       1\n</code></pre> <p></p> <p>check the complex variation in vcf files</p> <pre><code>awk 'length($4) &gt; 2' 5NM_2Kb94aep1.vcf |head -100 |less -S </code></pre> Output <pre><code>```\n##INFO=&lt;ID=AC,Number=A,Type=Integer,Description=\"Total number of alternate alleles in called genotypes\"&gt;\n##INFO=&lt;ID=NS,Number=1,Type=Integer,Description=\"Number of samples with data\"&gt;\n##INFO=&lt;ID=AN,Number=1,Type=Integer,Description=\"Total number of alleles in called genotypes\"&gt;\n##INFO=&lt;ID=LV,Number=1,Type=Integer,Description=\"Level in the snarl tree (0=top level)\"&gt;\n##INFO=&lt;ID=PS,Number=1,Type=String,Description=\"ID of variant corresponding to parent snarl\"&gt;\n##INFO=&lt;ID=AT,Number=R,Type=String,Description=\"Allele Traversal as path in graph\"&gt;\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  NC_017518.1     NZ_CP007668.1   NZ_CP016880.1   NZ_CP020423.2\nNC_003112.2     3441    &gt;250&gt;600        CCAACCTCGCCAAAGTCCGCAAACAAGTAACTGCTTTGTGCAATAAATACCCCGTTTACGGCGCGTAAGCCTTTTTAAAAATATTCCGCCAAGCAATCCAATGCCGCCTGAAATCTCATAATGTTTCAGGCGGAAACCTTTGCAAAAATCCCCAAAATCCCCTAAATTCCCACCAAG\nNC_003112.2     4164    &gt;392&gt;397        GCG     AAG,AAA 60      .       AC=1,1;AF=0.5,0.5;AN=2;AT=&gt;392&gt;393&gt;395&gt;397,&gt;392&gt;394&gt;395&gt;397,&gt;392&gt;394&gt;396&gt;397;NS=2;LV=1;PS=&gt;250&gt;600      GT      2       1       .       .\nNC_003112.2     4178    &gt;397&gt;402        ATCAAGAAAAACGGC AT,ACAAAGAAAAACGGC      60      .       AC=1,1;AF=0.5,0.5;AN=2;AT=&gt;397&gt;398&gt;399&gt;401&gt;402,&gt;397&gt;398&gt;402,&gt;397&gt;400&gt;401&gt;402;NS=2;LV=1;PS=&gt;250&gt;600      GT      2       1\nNC_003112.2     4394    &gt;426&gt;431        TTG     TTA,CAG 60      .       AC=1,1;AF=0.5,0.5;AN=2;AT=&gt;426&gt;428&gt;429&gt;431,&gt;426&gt;428&gt;430&gt;431,&gt;426&gt;427&gt;429&gt;431;NS=2;LV=1;PS=&gt;250&gt;600      GT      2       1       .       .\nNC_003112.2     4918    &gt;518&gt;520        TCC     T       60      .       AC=1;AF=0.5;AN=2;AT=&gt;518&gt;519&gt;520,&gt;518&gt;520;NS=2;LV=1;PS=&gt;250&gt;600 GT      1       0       .       .\nNC_003112.2     5116    &gt;529&gt;553        TCCCGTCATTCCCGCGCAGGCGGGAATCTAGGTTTGTCGGCACGGAAACTTATCGGGTAAAACGGTTTCTTTAGATTTTACGTTCTAGATTCCCGCCTGCGCGGGAATGACGATGAAAAGATTGTTGTCGCTTCGGATAAATTTTTGTCGCGTTGGGTTCTAGATTCCCGCCTGCGC\nNC_003112.2     5441    &gt;553&gt;556        TCCCC   T,TCCC  60      .       AC=1,1;AF=0.5,0.5;AN=2;AT=&gt;553&gt;554&gt;555&gt;556,&gt;553&gt;556,&gt;553&gt;555&gt;556;NS=2;LV=1;PS=&gt;250&gt;600  GT      2       1       .       .\nNC_003112.2     6462    &gt;600&gt;603        ACT     AA      60      .       AC=3;AF=0.75;AN=4;AT=&gt;600&gt;602&gt;603,&gt;600&gt;601&gt;603;NS=4;LV=0        GT      1       0       1       1\nNC_003112.2     8056    &gt;938&gt;1174       AGCTGCGCCGCCAGCGTGCAGAACGCCGCAACGTACAGGGACAAGTCAACTTCAAGCTCGATAGCGGTGAGAAAAGTGGCAAAATCATCGCCGAATTGGAACACGCTTCGTTTGCCTATGGCGGCAAAGTCATTATGGACAAATTCTCCGCTATCTTGCAGCGCGGCGACAAAATCG\nNC_003112.2     40957   &gt;1264&gt;1267      CACCCAGTTGCGCCAAAGCTGCGCCATCCCGCTC      TACACAGTTACGCCAAAGTTGCGCCATCCCGCTT      60      .       AC=2;AF=0.5;AN=4;AT=&gt;1264&gt;1266&gt;1267,&gt;1264&gt;1265&gt;1267;NS=4;LV=0   GT      0       0\nNC_003112.2     42763   &gt;1445&gt;1450      TGG     CAA,CAG 60      .       AC=2,1;AF=0.5,0.25;AN=4;AT=&gt;1445&gt;1447&gt;1449&gt;1450,&gt;1445&gt;1446&gt;1448&gt;1450,&gt;1445&gt;1446&gt;1449&gt;1450;NS=4;LV=0     GT      2       0       1       1\nNC_003112.2     42797   &gt;1465&gt;1470      CGCG    CATA,TGCG       60      .       AC=2,1;AF=0.5,0.25;AN=4;AT=&gt;1465&gt;1466&gt;1469&gt;1470,&gt;1465&gt;1466&gt;1467&gt;1470,&gt;1465&gt;1468&gt;1469&gt;1470;NS=4;LV=0     GT      0       2       1       1\nNC_003112.2     43307   &gt;1650&gt;1653      GAG     TTC     60      .       AC=1;AF=0.25;AN=4;AT=&gt;1650&gt;1652&gt;1653,&gt;1650&gt;1651&gt;1653;NS=4;LV=0  GT      0       1       0       0\nNC_003112.2     45378   &gt;1733&gt;1738      GGCCCGCTTCAGGGGC        GGCGCGCTTCAGGGGC,G      60      .       AC=2,2;AF=0.5,0.5;AN=4;AT=&gt;1733&gt;1734&gt;1736&gt;1737&gt;1738,&gt;1733&gt;1734&gt;1735&gt;1737&gt;1738,&gt;1733&gt;1738;NS=4;LV=0      GT      2\nNC_003112.2     47380   &gt;1813&gt;1815      TCG     T       60      .       AC=4;AF=1;AN=4;AT=&gt;1813&gt;1814&gt;1815,&gt;1813&gt;1815;NS=4;LV=0  GT      1       1       1       1\nNC_003112.2     47406   &gt;1837&gt;1839      AACGGAAT        A       60      .       AC=4;AF=1;AN=4;AT=&gt;1837&gt;1838&gt;1839,&gt;1837&gt;1839;NS=4;LV=0  GT      1       1       1       1\nNC_003112.2     47431   &gt;1851&gt;1854      AAA     CTT     60      .       AC=4;AF=1;AN=4;AT=&gt;1851&gt;1852&gt;1854,&gt;1851&gt;1853&gt;1854;NS=4;LV=0     GT      1       1       1       1\nNC_003112.2     47447   &gt;1861&gt;1863      ACG     A       60      .       AC=4;AF=1;AN=4;AT=&gt;1861&gt;1862&gt;1863,&gt;1861&gt;1863;NS=4;LV=0  GT      1       1       1       1\nNC_003112.2     47451   &gt;1863&gt;1866      TCCG    TT      60      .       AC=4;AF=1;AN=4;AT=&gt;1863&gt;1865&gt;1866,&gt;1863&gt;1864&gt;1866;NS=4;LV=0     GT      1       1       1       1\nNC_003112.2     47457   &gt;1866&gt;1869      GAA     TCC     60      .       AC=4;AF=1;AN=4;AT=&gt;1866&gt;1868&gt;1869,&gt;1866&gt;1867&gt;1869;NS=4;LV=0     GT      1       1       1       1\nNC_003112.2     47464   &gt;1872&gt;1874      TCCATTGCCGCATTGTCCAAGCAGTTTCCCTTGCGGGACATACTCTGAACCAGACCGTTGCCTTTCAACTGCTTTTG   T       60      .       AC=4;AF=1;AN=4;AT=&gt;1872&gt;1873&gt;1874,&gt;1872&gt;1874;NS=4;LV=0  GT      1       1\nNC_003112.2     48557   &gt;1944&gt;1949      TCG     CGG,CGA 60      .       AC=2,1;AF=0.5,0.25;AN=4;AT=&gt;1944&gt;1946&gt;1947&gt;1949,&gt;1944&gt;1945&gt;1947&gt;1949,&gt;1944&gt;1945&gt;1948&gt;1949;NS=4;LV=0     GT      0       2       1       1\nNC_003112.2     48645   &gt;1982&gt;1985      CAC     AGA     60      .       AC=1;AF=0.25;AN=4;AT=&gt;1982&gt;1984&gt;1985,&gt;1982&gt;1983&gt;1985;NS=4;LV=0  GT      0       0       0       1\nNC_003112.2     48936   &gt;2036&gt;2040      TAT     TGT,TG  60      .       AC=2,1;AF=0.5,0.25;AN=4;AT=&gt;2036&gt;2037&gt;2039&gt;2040,&gt;2036&gt;2038&gt;2039&gt;2040,&gt;2036&gt;2038&gt;2040;NS=4;LV=0  GT      0       1       2       1\nNC_003112.2     48942   &gt;2040&gt;2042      CCT     C       60      .       AC=1;AF=0.25;AN=4;AT=&gt;2040&gt;2041&gt;2042,&gt;2040&gt;2042;NS=4;LV=0       GT      0       0       1       0\nNC_003112.2     49330   &gt;2124&gt;2129      TGT     TGG,ATT 60      .       AC=3,1;AF=0.75,0.25;AN=4;AT=&gt;2124&gt;2126&gt;2127&gt;2129,&gt;2124&gt;2126&gt;2128&gt;2129,&gt;2124&gt;2125&gt;2127&gt;2129;NS=4;LV=0    GT      1       2       1       1\nNC_003112.2     49436   &gt;2170&gt;2268      ACTTGTCTGACATGGAAAAATCCCTGTATTGAATTAAAAATCAATACAGGGATTGTAGGAAAGGCCGTCTGACTAAGCCTTTAATACGGGTTAAAACTTAATCAGTAGAGAGAGATGTGAGGATGATTTTTTTAGGCTTACGAGAGCCATTTTGCTTTAAGTCAAACTCAACTGTTA\nNC_003112.2     49437   &gt;2173&gt;2175      CTT     C       60      .       AC=3;AF=1;AN=3;AT=&gt;2173&gt;2174&gt;2175,&gt;2173&gt;2175;NS=3;LV=1;PS=&gt;2170&gt;2268    GT      .       1       1       1\nNC_003112.2     50804   &gt;2203&gt;2205      AGAT    A       60      .       AC=1;AF=1;AN=1;AT=&gt;2203&gt;2204&gt;2205,&gt;2203&gt;2205;NS=1;LV=1;PS=&gt;2170&gt;2268    GT      1       .       .       .\nNC_003112.2     50904   &gt;2220&gt;2223      ATTC    GGCA    60      .       AC=1;AF=1;AN=1;AT=&gt;2220&gt;2222&gt;2223,&gt;2220&gt;2221&gt;2223;NS=1;LV=1;PS=&gt;2170&gt;2268       GT      1       .       .       .\nNC_003112.2     53387   &gt;2342&gt;2345      CAA     ATG     60      .       AC=1;AF=0.25;AN=4;AT=&gt;2342&gt;2344&gt;2345,&gt;2342&gt;2343&gt;2345;NS=4;LV=0  GT      1       0       0       0\nNC_003112.2     53393   &gt;2348&gt;2351      ACAA    TTTC    60      .       AC=1;AF=0.25;AN=4;AT=&gt;2348&gt;2350&gt;2351,&gt;2348&gt;2349&gt;2351;NS=4;LV=0  GT      1       0       0       0\nNC_003112.2     53414   &gt;2368&gt;2370      CGAT    C       60      .       AC=1;AF=0.25;AN=4;AT=&gt;2368&gt;2369&gt;2370,&gt;2368&gt;2370;NS=4;LV=0       GT      1       0       0       0\nNC_003112.2     53471   &gt;2391&gt;2394      AGCG    CCAC    60      .       AC=1;AF=0.25;AN=4;AT=&gt;2391&gt;2392&gt;2394,&gt;2391&gt;2393&gt;2394;NS=4;LV=0  GT      1       0       0       0\nNC_003112.2     53493   &gt;2403&gt;2406      TCAA    CTTG    60      .       AC=1;AF=0.25;AN=4;AT=&gt;2403&gt;2404&gt;2406,&gt;2403&gt;2405&gt;2406;NS=4;LV=0  GT      1       0       0       0\nNC_003112.2     53604   &gt;2454&gt;2456      TGGGCTG T       60      .       AC=1;AF=0.25;AN=4;AT=&gt;2454&gt;2455&gt;2456,&gt;2454&gt;2456;NS=4;LV=0       GT      1       0       0       0\nNC_003112.2     53746   &gt;2505&gt;2508      CTGGTGGGTTTGGCCGAAGGG   TTGGTGGGACTTGCCGAAGGA   60      .       AC=3;AF=0.75;AN=4;AT=&gt;2505&gt;2507&gt;2508,&gt;2505&gt;2506&gt;2508;NS=4;LV=0  GT      1       1       1       0\nNC_003112.2     55432   &gt;2590&gt;2597      CACG    CTC,CCCGAACAACCCG       60      .       AC=2,2;AF=0.5,0.5;AN=4;AT=&gt;2590&gt;2592&gt;2593&gt;2596&gt;2597,&gt;2590&gt;2591&gt;2594&gt;2597,&gt;2590&gt;2593&gt;2594&gt;2595&gt;2596&gt;2597;NS=4;LV=0       GT      2\nNC_003112.2     55984   &gt;2637&gt;2639      AAAACCACAACC    A       60      .       AC=3;AF=0.75;AN=4;AT=&gt;2637&gt;2638&gt;2639,&gt;2637&gt;2639;NS=4;LV=0       GT      1       0       1       1\n\n```\n</code></pre> bcftools <code>isec</code> to check the difference for 5NM based on two settings, -S 2000 -p 94 -k 19 and -S 2000 -p 94 -k 35 <p><pre><code>bcftools view 5NM_2Kb94aep1.vcf  -Oz -o 5NM_2Kb94aep1.vcf.gz\n</code></pre> <pre><code>bcftools view 5NM_2Kb94_k35aep1.vcf -Oz -o 5NM_2Kb94_k35aep1.vcf.gz\n</code></pre> <pre><code>bcftools index 5NM_2Kb94aep1.vcf.gz\n</code></pre> <pre><code>bcftools index 5NM_2Kb94_k35aep1.vcf.gz\n</code></pre> <pre><code>bcftools isec 5NM_2Kb94aep1.vcf.gz 5NM_2Kb94_k35aep1.vcf.gz -p isec_5NM_2Kb94diff_k\n</code></pre></p>"},{"location":"6_Variant_calling/#extract-distance-among-paths","title":"Extract distance among paths","text":"<p>code</p> <pre><code>odgi paths -i 5NM_2Kb94.gfa -d -D 'AAAA' &gt;5NM_2Kb94.gfa_similarity\ncut -f 1,2,6 5NM_2Kb94.gfa_similarity&gt;5NM_2Kb94.gfa_similarity_cut\n</code></pre> <p>code</p> <pre><code>#Using R for distanc clustering\nmodule purge\nmodule load R/4.0.1-gimkl-2020a\nR\n</code></pre> <p>code</p> <pre><code>library(reshape)\nlibrary(ape)\n# read in the data\ndat=read.csv(\"./5NM_2Kb94.gfa_similarity_cut\",sep=\"\\t\")\ndat\n# use reshape's cast function to change to matrix\nm &lt;- cast(dat, group.a ~ group.b)\nm\n# set the row names\nrownames(m) &lt;- m[,1]\nrownames(m)\n# change the matrix to a distance matrix\nd &lt;- dist(m)\nd\n# do hierarchical clustering\nh &lt;- hclust(d)\nh\n# plot the dendrogram\n#plot(h)\n# use ape's as phylo function\ntree &lt;- as.phylo(h)\n# export as newick for viewing in figtree\nwrite.tree(phy=tree, file = '5NM_2Kb94_distance.tree')\n</code></pre>"},{"location":"Supplementary/supplementary_1/","title":"NeSI HPC Auth.Factors Setup &amp; Jupyter Login","text":"1. Set HPC Password <p>Done via https://my.nesi.org.nz/login</p> <p></p> 2. Set HPC Second Factor <p>Done via https://my.nesi.org.nz/login</p> <p></p> 3. Jupyter Login Details <ol> <li>Follow https://jupyter.nesi.org.nz/hub/login</li> <li><p>Enter NeSI username, HPC password and 6 digit second factor token</p></li> <li><p>Choose server options as below &gt;&gt;make sure to choose the correct project code <code>nesi02659</code>, number of CPUs <code>CPUs=4</code>, memory <code>8 GB</code> prior to pressing button. <p></p> 4. Reset HPC Password <p>Done via https://my.nesi.org.nz/login</p> <p></p> 5. ReSet HPC Second Factor <p>Done via https://my.nesi.org.nz/login</p> <p></p>"},{"location":"Supplementary/supplementary_2/","title":"Jupyter Virtual Desktop","text":""},{"location":"Supplementary/supplementary_2/#open-a-virtual-desktop-from-jupyterhub","title":"Open a Virtual Desktop from JupyterHub","text":"<p>How to open a Virtual Desktop</p> <ul> <li>Click blue + button on top left corner and then the Virtual Desktop icon</li> </ul> <p></p>"},{"location":"Supplementary/supplementary_2/#troubleshooting","title":"Troubleshooting","text":"<p>In an instance where Virtual Desktop failed to connect</p> <ul> <li>If you are to encounter following during Virtual Desktop launch</li> </ul> <p></p> <ul> <li>Restart Jupyter as below and try again please </li> </ul> <p></p>"},{"location":"Supplementary/supplementary_3_Short_reads/","title":"Short reads","text":"<p>NGS data analysis used graph as a reference </p>"},{"location":"Supplementary/supplementary_3_Short_reads/#vg-mapping-preliminaries","title":"vg mapping preliminaries","text":"<p>Although vg contains a number of tools for working with pangenome graphs, it is best-known for read mapping. This is ultimately what many of its users are interested in <code>vg</code> for. In fact, vg contains three mature short read mapping tools:</p> <ul> <li><code>vg map</code>: the original, highly accurate mapping algorithm</li> <li><code>vg giraffe</code>: the much faster and still accurate haplotype-based mapping algorithm</li> <li><code>vg mpmap</code>: the splice-aware RNA-seq mapping algorithm</li> </ul> <p>more details of vg can be found https://github.com/vgteam/vg</p> <p>we use vg map in this workshop </p>"},{"location":"Supplementary/supplementary_3_Short_reads/#learning-objectives","title":"Learning objectives","text":"<ul> <li>Map NGS data to graph using vg map</li> <li>Variant calling for NGS data against genome graph </li> </ul>"},{"location":"Supplementary/supplementary_3_Short_reads/#build-index-for-graph","title":"Build index for graph","text":"<p>code</p> <pre><code>mkdir graph_NGS\n\n#copy graph to the graph reference (.gfa file) to work direvtory graph_NGS \ncp /home/$your_home_dir/pg_workshop/5NM*.gfa ./home/$your_home_dir/pg_workshop/graph_NGS/5NM.gfa\n\ncd /home/$your_home_dir/pg_workshop/graph_NGS\n</code></pre> <p>Load the necessary modules for an example run.</p> <p>code</p> <pre><code>module purge\nmodule load vg/1.46.0\n</code></pre> <p>Build the index.</p> <p>code</p> <pre><code>mkdir -p ${temp_dir}\n# Convert graph into 256 bp chunks, saving as vg format\nvg mod -X 256 5NM.gfa &gt; 5NM_256.vg\n\n#small graph is ok without prunning, complex graph will need to prune first before generating index\n#Build xg and gcsa index\nvg index -b ${temp_dir} -t 4 -x 5NM_256.xg -g 5NM_256.gcsa -k 16 5NM_256.vg\n### you may have run out of temporary disk space at temp_dir\n### pruning: use -M if pruning fails\nvg prune -u -m node-mapping.tmp -t 4 -k 24 5NM_256.vg &gt; 5NM_256_chopped.vg\n\nvg index 5NM_256_chopped.vg -x 5NM_256_chopped.xg\n### gcsa index, it takes .......\nvg index -b temp_dir -g 5NM_256_chopped.gcsa -x 5NM_256_chopped.xg -g 5NM_256_chopped.gcsa -k 16 5NM_256_chopped.vg\n</code></pre> code <pre><code>#run a slurm job for this, it takes ~10 mins based on the following setting \n#!/bin/bash\n#SBATCH --account       nesi02659\n#SBATCH --job-name      build_index_for_5NMGraph\n#SBATCH --cpus-per-task 8\n#SBATCH --mem           16G\n#SBATCH --time          1:00:00\n#SBATCH --error         %x_%j.err\n#SBATCH --output        %x_%j.out\n# Modules\nmodule purge\nmodule load vg/1.46.0\n\n# Variables\n#cd /home/zyang/pg_workshop/graph_NGS\ndata=5NM.gfa\nmkdir -p temp_dir\n\n# Convert graph into 256 bp chunks, saving as vg format\nvg mod -X 256 5NM.gfa &gt; 5NM_256.vg\n\n#small graph is ok without prunning\n# Build xg and gcsa index\n#vg index -b ${temp_dir} -t $cpus-per-task -x 5NM_256.xg -g 5NM_256.gcsa -k 16 5NM_256.vg\n#complex graph will need to prune first before generating index\n### pruning: use -M if pruning fails\nvg prune -u -m node-mapping.tmp -t 8 -k 24 5NM_256.vg &gt; 5NM_256_chopped.vg\n\nvg index 5NM_256_chopped.vg -x 5NM_256_chopped.xg\n### gcsa index\nvg index -b temp_dir -t 8 -x 5NM_256_chopped.xg -g 5NM_256_chopped.gcsa -k 16 5NM_256_chopped.vg\n</code></pre>"},{"location":"Supplementary/supplementary_3_Short_reads/#map-ngs-reads-to-graph","title":"Map NGS reads to graph","text":"<p>Map reads back to graph reference</p> <p>code</p> <pre><code># Modules\nmodule purge\nmodule load vg/1.46.0\n\n# Map reads\n#SAMN13450731 is the NCBI record for NMI138 \nvg map -t 8 -d 5NM_256_chopped -f NMI138_S5_R1_P.fastq.gz -f NMI138_S5_R1_P.fastq.gz -N NMI138  &gt; NM138.vgmap_5NM.gam\n\n# Output mapping statistics\nvg stats -a NM138.vgmap_5NM.gam &gt; /NM138.vgmap_4Sim_stats </code></pre> <p>Map reads back to graph reference as a slurm job.</p> code <pre><code>#!/bin/bash -e\n#SBATCH --account       nesi02659\n#SBATCH --job-name      vgmap_5e_5NM\n#SBATCH --cpus-per-task 24\n#SBATCH --mem           4G\n#SBATCH --time          01:00:00\n#SBATCH --error         %x_%j.err\n#SBATCH --output        %x_%j.out\n# Modules\nmodule purge\nmodule load vg/1.46.0\n\n# Variables\nwkdir=~/pg_test/graph_NGS\nindex=${wkdir}/5NM_256_chopped.gcsa\nindex_prefix=${index%%.gcsa\n# Map reads\nvg map -t $SLURM_CPUS_PER_TASK -d ${index_prefix} -f NMI138_S5_R1_P.fastq.gz -f NMI138_S5_R2_P.fastq.gz -N NMI138 &gt; NM138.vgmap_5NM.gam\n# Output mapping statistics\nvg stats -a NM138.vgmap_5NM.gam &gt; NM138.vgmap_5NM_stats\n</code></pre>"},{"location":"Supplementary/supplementary_3_Short_reads/#genotying-known-variants","title":"Genotying known variants","text":"<p>Generate snarls of graph.</p> <p>code</p> <pre><code>module purge\nmodule load vg/1.46.0\n\nvg snarls -t 2 5NM_256.xg &gt; 5NM_256.xg.snarls\n</code></pre> <p>Perform genotyping.</p> <p>code</p> <pre><code># Calculate support reads\nvg pack -t 8 -x 5NM_256.xg -g NM138.vgmap_5NM.gam -o NM138_vgmap_5NM_256.pack\n\n# Call variants using the same coordinates and include reference calls for comparison\nvg call -t 8 -m 3,10 5NM_256.xg -k NM138_vgmap_5NM_256.pack -r 5NM_256.xg.snarls -a &gt; NM138.vgmap_5NM_256.pack_allR10S3.vcf\n</code></pre> code <pre><code>#!/bin/bash -e\n#SBATCH --account       nesi02659\n#SBATCH --job-name      5NM_vgmap_genotying\n#SBATCH --cpus-per-task 24\n#SBATCH --mem           4G\n#SBATCH --time          01:00:00\n#SBATCH --error         %x_%j.err\n#SBATCH --output        %x_%j.out\n# Modules\nmodule purge module load vg/1.46.0\n\nvg index 5NM_256.vg -x 5NM_256.xg\n\nvg snarls -t 2 5NM_256.xg &gt; 5NM_256.xg.snarls\n\n# Calculate support reads\nvg pack -t 8 -x 5NM_256.xg -g NM138.vgmap_5NM.gam -o NM138_vgmap_5NM_256.pack\n\n# Call variants using the same coordinates and include reference calls for comparison\nvg call -t 8 -m 3,10 5NM_256.xg -k NM138_vgmap_5NM_256.pack -r 5NM_256.xg.snarls -a &gt; NM138.vgmap_5NM_256.pack_allR10S3.vcf\n</code></pre>"},{"location":"Supplementary/supplementary_3_Short_reads/#novel-variant-calling-using-graph-reference","title":"Novel variant calling using graph reference","text":"<p>code</p> <pre><code> # In order to also consider novel variants from the reads, use the augmented graph and gam \n# (as created in the \"Augmentation\" example using vg augment -A).\n# Augment the graph with all variation from the GAM, saving to aug.vg\n### Augment the graph with all variation form the GAM except \n### that implied by soft clips, saving to aug.vg.\n### *aug-gam contains the same reads as aln.gam but mapped to aug.vg\n# Augment graph\nvg augment -t 8  5NM_256_chopped.vg NM138.vgmap_5NM.gam -A NM138.nofilt_aug.gam &gt; NM138.nofilt_aug.vg\n\n# Index the augmented graph\nvg index -t 8  NM138.nofilt_aug.vg  -x NM138.nofilt_aug.xg\n\n# Compute the all read support from the augmented GAM\nvg pack -t 8 -x NM138.nofilt_aug.xg -g NM138.nofilt_aug.gam -o NM138.nofilt_aug_allR.pack\n\n# Call variants.\n#we need to trouble shooting about this, why the vcf file is empty \nvg call -t 8 -m 3,10 NM138.nofilt_aug.xg -k NM138.nofilt_aug_allR.pack &gt; NM138.nofilt_aug_allR.pack.vcf\n</code></pre> Slurm script <pre><code>#!/bin/bash -e\n#SBATCH --account       nesi02659\n#SBATCH --job-name      5.call_novel_variant\n#SBATCH --cpus-per-task 24\n#SBATCH --mem           4G\n#SBATCH --time          01:00:00\n#SBATCH --error         %x_%j.err\n#SBATCH --output        %x_%j.out\n#SBATCH --array         0-5\n# Modules\nmodule purge module load vg/1.46.0\n\n# Variables\nwkdir=~/pg_workshop/graph_NGS\ngam_dir=${wkdir}/graph_based_mapping\nout_dir=${wkdir}/vgmap_5e_sim4_allR10S3_novelcalling\n\nmkdir -p ${out_dir}\nvg=${wkdir}/refs/4Sim_1K96_256.vg\nxg=${wkdir}/refs/4Sim_1K96_256.xg\n\n# Array\nfile_array=(${gam_dir}/*.gam)\nfile=${file_array[$SLURM_ARRAY_TASK_ID]}\nprefix=$(basename ${file} .wgsim_er0.005.vgmap_4Sim.gam)\n# In order to also consider novel variants from the reads, use the augmented graph and gam \n# (as created in the \"Augmentation\" example using vg augment -A).\n# Augment the graph with all variation from the GAM, saving to aug.vg\n### Augment the graph with all variation form the GAM except \n### that implied by soft clips, saving to aug.vg.\n### *aug-gam contains the same reads as aln.gam but mapped to aug.vg\n# Augment graph\nvg augment -t $SLURM_CPUS_PER_TASK ${vg} ${file} -A ${out_dir}/${prefix}.nofilt_aug.gam &gt; ${out_dir}/${prefix}.nofilt_aug.vg\n\n# Index the augmented graph\nvg index -t $SLURM_CPUS_PER_TASK ${out_dir}/${prefix}.nofilt_aug.vg -x ${out_dir}/${prefix}.nofilt_aug.xg\n\n# Compute the all read support from the augmented GAM\nvg pack -t $SLURM_CPUS_PER_TASK -x ${out_dir}/${prefix}.nofilt_aug.xg -g ${out_dir}/${prefix}.nofilt_aug.gam -o ${out_dir}/${prefix}.nofilt_aug_allR.pack\n\n# Call variants\nvg call -t $SLURM_CPUS_PER_TASK -m 3,10 ${out_dir}/${prefix}.nofilt_aug.xg -k ${out_dir}/${prefix}.nofilt_aug_allR.pack &gt; ${out_dir}/${prefix}.nofilt_aug_allR.pack.vcf\n</code></pre>"}]}